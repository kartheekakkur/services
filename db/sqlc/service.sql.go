// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: service.sql

package db

import (
	"context"
)

const createService = `-- name: CreateService :one
INSERT INTO service (
  name,
  description,
  versions
) VALUES (
  $1, $2, $3
)
RETURNING id, name, description, versions, created_at
`

type CreateServiceParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Versions    string `json:"versions"`
}

func (q *Queries) CreateService(ctx context.Context, arg CreateServiceParams) (Service, error) {
	row := q.db.QueryRowContext(ctx, createService, arg.Name, arg.Description, arg.Versions)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Versions,
		&i.CreatedAt,
	)
	return i, err
}

const deleteService = `-- name: DeleteService :exec
DELETE FROM service
WHERE name = $1
`

func (q *Queries) DeleteService(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteService, name)
	return err
}

const getService = `-- name: GetService :one
SELECT id, name, description, versions, created_at FROM service
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetService(ctx context.Context, name string) (Service, error) {
	row := q.db.QueryRowContext(ctx, getService, name)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Versions,
		&i.CreatedAt,
	)
	return i, err
}

const listServices = `-- name: ListServices :many
SELECT id, name, description, versions, created_at FROM service
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListServicesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListServices(ctx context.Context, arg ListServicesParams) ([]Service, error) {
	rows, err := q.db.QueryContext(ctx, listServices, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Service{}
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Versions,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateService = `-- name: UpdateService :one
UPDATE service
  set name = $2,
  description = $3
WHERE name = $1
RETURNING id, name, description, versions, created_at
`

type UpdateServiceParams struct {
	Name        string `json:"name"`
	Name_2      string `json:"name_2"`
	Description string `json:"description"`
}

func (q *Queries) UpdateService(ctx context.Context, arg UpdateServiceParams) (Service, error) {
	row := q.db.QueryRowContext(ctx, updateService, arg.Name, arg.Name_2, arg.Description)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Versions,
		&i.CreatedAt,
	)
	return i, err
}
